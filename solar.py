import requests
import json
import os
from dotenv import load_dotenv
import pprint
import numpy as np

def solar_api_request(lat_long):
    load_dotenv()

    APIKEY = os.getenv("GOOGLE_KEY")

    global response

    response = requests.get("https://solar.googleapis.com/v1/buildingInsights:findClosest?"+
                            "location.latitude=" + str(lat_long[0]) +
                            "&location.longitude="+ str(lat_long[1])+
                            "&requiredQuality=HIGH"
                            "&key=" + APIKEY)
    
    return


def solar_estimation(lat_long, num_panels):
    ''' Estimates the amount of energy is generated by a home's solar panels yearly
        with the specified latitudinal and longitudinal location and number of solar panels.
    '''

    # panel count

    solar_potential = response.json()['solarPotential']['solarPanelConfigs']

    for panel_config in solar_potential:
        if panel_config.get('panelsCount') == num_panels:
            return panel_config.get('yearlyEnergyDcKwh')

    pprint.pprint(solar_potential)
    # for panel_count in response.json().get("solarPotential"):

    
    # monthly to yearly

    # DC to AC electricity conversion




    # return solar_potential



def solar_max_panels():
    return response.json()['solarPotential'].get('maxArrayPanelsCount')


def solar_finances():
    return response.json()['solarPotential']['financialAnalyses']


def lifetime_savings_best_fit():
    lifetime_list = []
    num_panels = []
    finance_plans = response.json()['solarPotential']['financialAnalyses']

    for i in range(len(finance_plans) - 1):
        try:
            panel_count = finance_plans[i].get('panelConfigIndex')
            if panel_count > 0:
                num_panels.append(int(panel_count))
                lifetime_list.append(float(finance_plans[i]['leasingSavings']['savings']['savingsLifetime'].get('units')))
        except: pass

    # change the arrays to work with numpy
    num_panels = np.array(num_panels)
    lifetime_list = np.array(lifetime_list)

    print(num_panels)
    print(lifetime_list)

    slope, y_int = np.polyfit(num_panels, lifetime_list, 1)
    print(slope)
    print(y_int)

    return slope, y_int

def solar_savings(desired_num_panels, slope, y_int):
     return int(slope * desired_num_panels + y_int)